{"version":3,"sources":["../../../src/composables/nested/selectStrategies.ts"],"names":["independentSelectStrategy","select","id","value","mandatory","selected","set","Array","from","entries","find","key","in","v","children","parents","map","Map","out","arr","push","independentSingleSelectStrategy","rest","length","slice","leafSelectStrategy","single","strategy","has","classicSelectStrategy","items","item","shift","get","parent","childrenIds","everySelected","every","cid","noneSelected"],"mappings":"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","sourcesContent":["export type SelectStrategyFn = (data: {\n  id: string\n  value: boolean\n  selected: Map<string, 'on' | 'off' | 'indeterminate'>\n  children: Map<string, string[]>\n  parents: Map<string, string>\n  event?: Event\n  mandatory?: boolean\n}) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformInFn = (\n  v: string[] | undefined,\n  children: Map<string, string[]>,\n  parents: Map<string, string>\n) => Map<string, 'on' | 'off' | 'indeterminate'>\n\nexport type SelectStrategyTransformOutFn = (\n  v: Map<string, 'on' | 'off' | 'indeterminate'>,\n  children: Map<string, string[]>,\n  parents: Map<string, string>\n) => any[]\n\nexport type SelectStrategy = {\n  select: SelectStrategyFn\n  in: SelectStrategyTransformInFn\n  out: SelectStrategyTransformOutFn\n}\n\nexport const independentSelectStrategy: SelectStrategy = {\n  select: ({ id, value, mandatory, selected }) => {\n    selected.set(id, value ? 'on' : (\n      mandatory &&\n      !Array.from(selected.entries()).find(([key, value]) => value === 'on' && key !== id)\n    ) ? 'on' : 'off')\n\n    return selected\n  },\n  in: (v, children, parents) => {\n    let map = new Map()\n\n    for (const id of (v || [])) {\n      map = independentSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents,\n      })\n    }\n\n    return map\n  },\n  out: v => {\n    const arr = []\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on') arr.push(key)\n    }\n\n    return arr\n  },\n}\n\nexport const independentSingleSelectStrategy: SelectStrategy = {\n  select: ({ id, value, ...rest }) => {\n    return independentSelectStrategy.select({ ...rest, id, value, selected: new Map() })\n  },\n  in: (v, children, parents) => {\n    let map = new Map()\n\n    if (v?.length) {\n      map = independentSelectStrategy.in(v.slice(0, 1), children, parents)\n    }\n\n    return map\n  },\n  out: (v, children, parents) => {\n    return independentSelectStrategy.out(v, children, parents)\n  },\n}\n\nexport const leafSelectStrategy = (single = false): SelectStrategy => {\n  const strategy: SelectStrategy = {\n    select: ({ id, value, selected, children }) => {\n      if (children.has(id)) return selected\n\n      if (single) return new Map([[id, value ? 'on' : 'off']])\n\n      selected.set(id, value ? 'on' : 'off')\n\n      return selected\n    },\n    in: (v, children, parents) => {\n      let map = new Map()\n\n      for (const id of (v ?? [])) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents,\n        })\n      }\n\n      return map\n    },\n    out: independentSelectStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const classicSelectStrategy: SelectStrategy = {\n  select: ({ id, value, selected, children, parents }) => {\n    const items = [id]\n\n    while (items.length) {\n      const item = items.shift()!\n\n      selected.set(item, value ? 'on' : 'off')\n\n      if (children.has(item)) {\n        items.push(...children.get(item)!)\n      }\n    }\n\n    let parent = parents.get(id)\n\n    while (parent) {\n      const childrenIds = children.get(parent)!\n      const everySelected = childrenIds.every(cid => selected.get(cid) === 'on')\n      const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off')\n\n      selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate')\n\n      parent = parents.get(parent)\n    }\n\n    return selected\n  },\n  in: (v, children, parents) => {\n    let map = new Map()\n\n    for (const id of (v || [])) {\n      map = classicSelectStrategy.select({\n        id,\n        value: true,\n        selected: new Map(map),\n        children,\n        parents,\n      })\n    }\n\n    return map\n  },\n  out: (v, children) => {\n    const arr = []\n\n    for (const [key, value] of v.entries()) {\n      if (value === 'on' && !children.has(key)) arr.push(key)\n    }\n\n    return arr\n  },\n}\n"],"file":"selectStrategies.mjs"}