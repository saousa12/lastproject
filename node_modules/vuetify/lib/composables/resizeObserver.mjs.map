{"version":3,"sources":["../../src/composables/resizeObserver.ts"],"names":["onBeforeUnmount","readonly","ref","watch","IN_BROWSER","useResizeObserver","callback","resizeRef","contentRect","contentBoxSize","borderBoxSize","observer","ResizeObserver","entries","length","value","disconnect","newValue","oldValue","unobserve","undefined","observe","flush"],"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD;AAGA;SACSC,U;AAST,OAAO,SAASC,iBAAT,CAA4BC,QAA5B,EAA4E;AACjF,QAAMC,SAAS,GAAGL,GAAG,EAArB;AACA,QAAMM,WAAW,GAAGN,GAAG,EAAvB;AACA,QAAMO,cAAc,GAAGP,GAAG,EAA1B;AACA,QAAMQ,aAAa,GAAGR,GAAG,EAAzB;;AAEA,MAAIE,UAAJ,EAAgB;AACd,UAAMO,QAAQ,GAAG,IAAIC,cAAJ,CAAoBC,OAAD,IAAoC;AACtEP,MAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGO,OAAH,EAAYF,QAAZ,CAAR;AAEA,UAAI,CAACE,OAAO,CAACC,MAAb,EAAqB;AAErBN,MAAAA,WAAW,CAACO,KAAZ,GAAoBF,OAAO,CAAC,CAAD,CAAP,CAAWL,WAA/B;AACAC,MAAAA,cAAc,CAACM,KAAf,GAAuBF,OAAO,CAAC,CAAD,CAAP,CAAWJ,cAAX,CAA0B,CAA1B,CAAvB;AACAC,MAAAA,aAAa,CAACK,KAAd,GAAsBF,OAAO,CAAC,CAAD,CAAP,CAAWH,aAAX,CAAyB,CAAzB,CAAtB;AACD,KARgB,CAAjB;AAUAV,IAAAA,eAAe,CAAC,MAAM;AACpBW,MAAAA,QAAQ,CAACK,UAAT;AACD,KAFc,CAAf;AAIAb,IAAAA,KAAK,CAACI,SAAD,EAAY,CAACU,QAAD,EAAWC,QAAX,KAAwB;AACvC,UAAIA,QAAJ,EAAc;AACZP,QAAAA,QAAQ,CAACQ,SAAT,CAAmBD,QAAnB;AACAV,QAAAA,WAAW,CAACO,KAAZ,GAAoBK,SAApB;AACAX,QAAAA,cAAc,CAACM,KAAf,GAAuBK,SAAvB;AACAV,QAAAA,aAAa,CAACK,KAAd,GAAsBK,SAAtB;AACD;;AAED,UAAIH,QAAJ,EAAcN,QAAQ,CAACU,OAAT,CAAiBJ,QAAjB;AACf,KATI,EASF;AACDK,MAAAA,KAAK,EAAE;AADN,KATE,CAAL;AAYD;;AAED,SAAO;AACLf,IAAAA,SADK;AAELC,IAAAA,WAAW,EAAEP,QAAQ,CAACO,WAAD,CAFhB;AAGLC,IAAAA,cAAc,EAAER,QAAQ,CAACQ,cAAD,CAHnB;AAILC,IAAAA,aAAa,EAAET,QAAQ,CAACS,aAAD;AAJlB,GAAP;AAMD","sourcesContent":["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'\nimport type { DeepReadonly, Ref } from 'vue'\n\n// Globals\nimport { IN_BROWSER } from '@/util/globals'\n\ninterface ResizeState {\n  resizeRef: Ref<Element | undefined>\n  contentRect: DeepReadonly<Ref<DOMRectReadOnly | undefined>>\n  borderBoxSize: DeepReadonly<Ref<ResizeObserverSize | undefined>>\n  contentBoxSize: DeepReadonly<Ref<ResizeObserverSize | undefined>>\n}\n\nexport function useResizeObserver (callback?: ResizeObserverCallback): ResizeState {\n  const resizeRef = ref<Element>()\n  const contentRect = ref<DOMRectReadOnly>()\n  const contentBoxSize = ref<ResizeObserverSize>()\n  const borderBoxSize = ref<ResizeObserverSize>()\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      if (!entries.length) return\n\n      contentRect.value = entries[0].contentRect\n      contentBoxSize.value = entries[0].contentBoxSize[0]\n      borderBoxSize.value = entries[0].borderBoxSize[0]\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(resizeRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        contentRect.value = undefined\n        contentBoxSize.value = undefined\n        borderBoxSize.value = undefined\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n    contentBoxSize: readonly(contentBoxSize),\n    borderBoxSize: readonly(borderBoxSize),\n  }\n}\n"],"file":"resizeObserver.mjs"}