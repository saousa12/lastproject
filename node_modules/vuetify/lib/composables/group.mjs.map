{"version":3,"sources":["../../src/composables/group.ts"],"names":["useProxiedModel","computed","inject","onBeforeUnmount","onMounted","provide","reactive","toRef","consoleWarn","deepEqual","findChildrenWithProvide","getCurrentInstance","getUid","propsFactory","wrapInArray","makeGroupProps","modelValue","type","default","undefined","multiple","Boolean","mandatory","String","max","Number","selectedClass","disabled","makeGroupItemProps","value","useGroupItem","props","injectKey","required","vm","Error","id","Symbol","for","description","group","register","unregister","isSelected","toggle","select","useGroup","isUnmounted","items","selected","v","getIds","arr","getValues","groupVm","item","unwrapped","key","children","vnode","index","indexOf","splice","push","forceMandatoryValue","findIndex","find","length","internalValue","slice","includes","step","offset","currentId","currentIndex","i","newIndex","newItem","state","prev","next","ids","values"],"mappings":"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","sourcesContent":["// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef } from 'vue'\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\n\nexport interface GroupItem {\n  id: number\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n}\n\nexport interface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': ((val: unknown) => void) | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: number) => void\n  select: (id: number, value: boolean) => void\n  selected: Ref<any[]>\n  isSelected: (id: number) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: ComputedRef<{\n    id: number\n    value: unknown\n    disabled: boolean | undefined\n  }[]>\n  disabled: Ref<boolean | undefined>\n}\n\nexport interface GroupItemProvide {\n  id: number\n  isSelected: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<string | false | undefined>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\nexport type GroupItemProps = ExtractPropTypes<ReturnType<typeof makeGroupItemProps>>\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const id = getUid()\n\n  provide(Symbol.for(`${injectKey.description}:id`), id)\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const value = toRef(props, 'value')\n  const disabled = computed(() => group.disabled.value || props.disabled)\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, vm)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n\n  const selectedClass = computed(() => isSelected.value && (group.selectedClass.value ?? props.selectedClass))\n\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const key = Symbol.for(`${injectKey.description}:id`)\n    const children = findChildrenWithProvide(key, groupVm?.vnode)\n    const index = children.indexOf(vm)\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped)\n    } else {\n      items.push(unwrapped)\n    }\n  }\n\n  function unregister (id: number) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function select (id: number, value?: boolean) {\n    const item = items.find(item => item.id === id)\n    if (value && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n      const isSelected = ~index\n      value = value ?? !isSelected\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        isSelected &&\n        props.mandatory &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        !isSelected &&\n        props.max != null &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && value) internalValue.push(id)\n      else if (index >= 0 && !value) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      const isSelected = selected.value.includes(id)\n      if (props.mandatory && isSelected) return\n\n      selected.value = (value ?? !isSelected) ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: number) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids = []\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value)) != null) {\n        ids.push(item.id)\n      }\n    } else if (modelValue.includes(i)) {\n      ids.push(item.id)\n    }\n  }\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : i)\n    }\n  }\n\n  return values\n}\n"],"file":"group.mjs"}