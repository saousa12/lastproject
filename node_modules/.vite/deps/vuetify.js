import {
  LocaleAdapterSymbol,
  createLocaleAdapter
} from "./chunk-HMEC63DP.js";
import {
  DisplaySymbol,
  createDisplay,
  useDisplay
} from "./chunk-ETH2O4AQ.js";
import {
  aliases,
  mdi
} from "./chunk-Z24YY3CV.js";
import {
  RtlSymbol,
  createRtl,
  provideRtl,
  useRtl
} from "./chunk-EPQFEBLA.js";
import {
  useLayout
} from "./chunk-JFWDZJFL.js";
import {
  IconSymbol,
  defaultSets
} from "./chunk-J76OVAXV.js";
import {
  ThemeSymbol,
  createTheme,
  useTheme
} from "./chunk-RWYBNEPR.js";
import {
  DefaultsSymbol,
  createDefaults,
  mergeDeep
} from "./chunk-4CBMZOML.js";
import {
  reactive
} from "./chunk-NTQXILLN.js";
import {
  __spreadProps,
  __spreadValues,
  init_define_process_env
} from "./chunk-YCZKCQV3.js";

// dep:vuetify
init_define_process_env();

// node_modules/vuetify/lib/framework.mjs
init_define_process_env();
var createVuetify = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const install = (app) => {
    const {
      components = {},
      directives = {},
      icons = {}
    } = options;
    for (const key in directives) {
      const directive = directives[key];
      app.directive(key, directive);
    }
    for (const key in components) {
      const component = components[key];
      app.component(key, component);
    }
    app.provide(DefaultsSymbol, createDefaults(options.defaults));
    app.provide(DisplaySymbol, createDisplay(options.display));
    app.provide(ThemeSymbol, createTheme(app, options.theme));
    app.provide(IconSymbol, mergeDeep({
      defaultSet: "mdi",
      sets: __spreadProps(__spreadValues({}, defaultSets), {
        mdi
      }),
      aliases
    }, icons));
    const {
      adapter,
      rootInstance
    } = createLocaleAdapter(app, options == null ? void 0 : options.locale);
    app.provide(LocaleAdapterSymbol, adapter);
    app.provide(RtlSymbol, createRtl(rootInstance, options == null ? void 0 : options.locale));
    function inject(key) {
      var _vm$parent$provides, _vm$parent, _vm$vnode$appContext;
      const vm = this.$;
      const provides = (_vm$parent$provides = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _vm$parent$provides : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;
      if (provides && key in provides) {
        return provides[key];
      }
    }
    app.mixin({
      computed: {
        $vuetify() {
          return reactive({
            defaults: inject.call(this, DefaultsSymbol),
            display: inject.call(this, DisplaySymbol),
            theme: inject.call(this, ThemeSymbol),
            icons: inject.call(this, IconSymbol),
            locale: inject.call(this, LocaleAdapterSymbol),
            rtl: inject.call(this, RtlSymbol)
          });
        }
      }
    });
  };
  return {
    install
  };
};
export {
  createVuetify,
  provideRtl,
  useDisplay,
  useLayout,
  useRtl,
  useTheme
};
//# sourceMappingURL=vuetify.js.map
