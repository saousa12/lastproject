import {
  VDefaultsProvider
} from "./chunk-VYRRCII6.js";
import {
  VImg
} from "./chunk-V7VEXS3B.js";
import "./chunk-IXSZRHDZ.js";
import {
  makeLayoutItemProps,
  useLayoutItem
} from "./chunk-JFWDZJFL.js";
import {
  VBtn,
  useProxiedModel
} from "./chunk-LQMRXWFO.js";
import {
  makeVariantProps
} from "./chunk-MJDSONSS.js";
import "./chunk-LEHQ3QHV.js";
import {
  makeBorderProps,
  makeElevationProps,
  makeRoundedProps,
  useBorder,
  useElevation,
  useRounded
} from "./chunk-KHK4VKXQ.js";
import {
  makeTagProps
} from "./chunk-3L3WVG2E.js";
import {
  useBackgroundColor
} from "./chunk-DGYJUZFK.js";
import "./chunk-OMJM7X5T.js";
import "./chunk-J76OVAXV.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-RWYBNEPR.js";
import {
  convertToUnit,
  defineComponent,
  genericComponent,
  pick,
  propsFactory,
  provideDefaults,
  useRender
} from "./chunk-4CBMZOML.js";
import {
  computed,
  createVNode,
  mergeProps,
  ref,
  toRef
} from "./chunk-NTQXILLN.js";
import {
  __spreadProps,
  __spreadValues,
  init_define_process_env
} from "./chunk-YCZKCQV3.js";

// dep:vuetify_lib_components_VAppBar_index_mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VAppBar/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VAppBar/VAppBar.mjs
init_define_process_env();
import "D:/portfolio/WebMor_htmlp/lastproject/node_modules/vuetify/lib/components/VAppBar/VAppBar.css";

// node_modules/vuetify/lib/components/VToolbar/VToolbar.mjs
init_define_process_env();
import "D:/portfolio/WebMor_htmlp/lastproject/node_modules/vuetify/lib/components/VToolbar/VToolbar.css";

// node_modules/vuetify/lib/components/VToolbar/VToolbarTitle.mjs
init_define_process_env();
var VToolbarTitle = genericComponent()({
  name: "VToolbarTitle",
  props: __spreadValues({
    text: String
  }, makeTagProps()),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => {
      var _slots$default;
      const hasText = !!(slots.default || slots.text || props.text);
      return createVNode(props.tag, {
        "class": "v-toolbar-title"
      }, {
        default: () => [hasText && createVNode("div", {
          "class": "v-toolbar-title__placeholder"
        }, [slots.text ? slots.text() : props.text, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]
      });
    });
    return {};
  }
});

// node_modules/vuetify/lib/composables/forwardRef.mjs
init_define_process_env();
function useForwardRef(target) {
  for (var _len = arguments.length, refs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    refs[_key - 1] = arguments[_key];
  }
  return new Proxy(target, {
    get(target2, key) {
      if (Reflect.has(target2, key)) {
        return Reflect.get(target2, key);
      }
      for (const ref2 of refs) {
        if (ref2.value && Reflect.has(ref2.value, key)) {
          const val = Reflect.get(ref2.value, key);
          return typeof val === "function" ? val.bind(ref2.value) : val;
        }
      }
    },
    getOwnPropertyDescriptor(target2, key) {
      const descriptor = Reflect.getOwnPropertyDescriptor(target2, key);
      if (descriptor)
        return descriptor;
      for (const ref2 of refs) {
        if (!ref2.value)
          continue;
        const descriptor2 = Reflect.getOwnPropertyDescriptor(ref2.value, key);
        if (descriptor2)
          return descriptor2;
      }
      for (const ref2 of refs) {
        const obj = ref2.value && Object.getPrototypeOf(ref2.value);
        if (!obj)
          continue;
        const descriptor2 = Reflect.getOwnPropertyDescriptor(obj, key);
        if (descriptor2)
          return descriptor2;
      }
      return void 0;
    }
  });
}

// node_modules/vuetify/lib/components/VToolbar/VToolbar.mjs
var allowedDensities = [null, "prominent", "default", "comfortable", "compact"];
var makeVToolbarProps = propsFactory(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({
  absolute: Boolean,
  collapse: Boolean,
  color: String,
  density: {
    type: String,
    default: "default",
    validator: (v) => allowedDensities.includes(v)
  },
  extended: Boolean,
  extensionHeight: {
    type: [Number, String],
    default: 48
  },
  flat: Boolean,
  floating: Boolean,
  height: {
    type: [Number, String],
    default: 56
  },
  image: String,
  title: String
}, makeBorderProps()), makeElevationProps()), makeRoundedProps()), makeTagProps({
  tag: "header"
})), makeThemeProps()), "v-toolbar");
var VToolbar = genericComponent()({
  name: "VToolbar",
  props: makeVToolbarProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      themeClasses
    } = provideTheme(props);
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "color"));
    const contentHeight = computed(() => Number(props.height) + (props.density === "prominent" ? Number(props.height) : 0) - (props.density === "comfortable" ? 8 : 0) - (props.density === "compact" ? 16 : 0));
    provideDefaults({
      VBtn: {
        flat: true,
        variant: "text"
      },
      VTextField: {
        hideDetails: true
      }
    }, {
      scoped: true
    });
    useRender(() => {
      var _slots$image, _slots$prepend, _slots$default, _slots$append, _slots$extension;
      const hasTitle = !!(props.title || slots.title);
      const hasImage = !!(slots.image || props.image);
      const isExtended = !!(props.extended || slots.extension);
      return createVNode(props.tag, {
        "class": ["v-toolbar", {
          "v-toolbar--absolute": props.absolute,
          "v-toolbar--collapse": props.collapse,
          "v-toolbar--flat": props.flat,
          "v-toolbar--floating": props.floating,
          [`v-toolbar--density-${props.density}`]: true
        }, backgroundColorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value, themeClasses.value],
        "style": [backgroundColorStyles.value]
      }, {
        default: () => [hasImage && createVNode("div", {
          "class": "v-toolbar__image"
        }, [createVNode(VDefaultsProvider, {
          "defaults": {
            VImg: {
              cover: true,
              src: props.image
            }
          },
          "scoped": true
        }, {
          default: () => [slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots) : createVNode(VImg, null, null)]
        })]), createVNode("div", {
          "class": "v-toolbar__content",
          "style": {
            height: convertToUnit(contentHeight.value)
          }
        }, [slots.prepend && createVNode("div", {
          "class": "v-toolbar__prepend"
        }, [(_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots)]), hasTitle && createVNode(VToolbarTitle, {
          "text": props.title
        }, {
          text: slots.title
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), slots.append && createVNode("div", {
          "class": "v-toolbar__append"
        }, [(_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots)])]), isExtended && createVNode("div", {
          "class": "v-toolbar__extension",
          "style": {
            height: convertToUnit(props.extensionHeight)
          }
        }, [(_slots$extension = slots.extension) == null ? void 0 : _slots$extension.call(slots)])]
      });
    });
    return useForwardRef({
      contentHeight
    });
  }
});
function filterToolbarProps(props) {
  var _VToolbar$props;
  return pick(props, Object.keys((_VToolbar$props = VToolbar == null ? void 0 : VToolbar.props) != null ? _VToolbar$props : {}));
}

// node_modules/vuetify/lib/components/VAppBar/VAppBar.mjs
var VAppBar = defineComponent({
  name: "VAppBar",
  props: __spreadProps(__spreadValues(__spreadValues({
    modelValue: {
      type: Boolean,
      default: true
    },
    position: {
      type: String,
      default: "top",
      validator: (value) => ["top", "bottom"].includes(value)
    }
  }, makeVToolbarProps()), makeLayoutItemProps()), {
    height: {
      type: [Number, String],
      default: 64
    }
  }),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const vToolbarRef = ref();
    const isActive = useProxiedModel(props, "modelValue");
    const height = computed(() => {
      var _vToolbarRef$value;
      return (_vToolbarRef$value = vToolbarRef.value) == null ? void 0 : _vToolbarRef$value.contentHeight;
    });
    const {
      layoutItemStyles
    } = useLayoutItem({
      id: props.name,
      priority: computed(() => parseInt(props.priority, 10)),
      position: toRef(props, "position"),
      layoutSize: height,
      elementSize: height,
      active: isActive,
      absolute: toRef(props, "absolute")
    });
    return () => {
      const [toolbarProps] = filterToolbarProps(props);
      return createVNode(VToolbar, mergeProps({
        "ref": vToolbarRef,
        "class": ["v-app-bar", {
          "v-app-bar--bottom": props.position === "bottom"
        }],
        "style": layoutItemStyles.value
      }, toolbarProps), slots);
    };
  }
});

// node_modules/vuetify/lib/components/VAppBar/VAppBarNavIcon.mjs
init_define_process_env();
var VAppBarNavIcon = defineComponent({
  name: "VAppBarNavIcon",
  props: {
    icon: {
      type: String,
      default: "$menu"
    }
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    return () => {
      var _slots$default;
      return createVNode(VBtn, {
        "class": "v-app-bar-nav-icon",
        "icon": props.icon
      }, {
        default: () => [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]
      });
    };
  }
});

// node_modules/vuetify/lib/components/VAppBar/VAppBarTitle.mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VToolbar/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VToolbar/VToolbarItems.mjs
init_define_process_env();
var VToolbarItems = defineComponent({
  name: "VToolbarItems",
  props: __spreadValues({}, makeVariantProps({
    variant: "contained-text"
  })),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    provideDefaults({
      VBtn: {
        color: toRef(props, "color"),
        textColor: toRef(props, "textColor"),
        variant: toRef(props, "variant")
      }
    });
    return () => {
      var _slots$default;
      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);
    };
  }
});

// node_modules/vuetify/lib/components/VAppBar/VAppBarTitle.mjs
var VAppBarTitle = defineComponent(__spreadProps(__spreadValues({}, VToolbarTitle), {
  name: "VAppBarTitle",
  setup(_, _ref) {
    let {
      slots
    } = _ref;
    return () => createVNode(VToolbarTitle, {
      "class": "v-app-bar-title"
    }, slots);
  }
}));
export {
  VAppBar,
  VAppBarNavIcon,
  VAppBarTitle
};
//# sourceMappingURL=vuetify_lib_components_VAppBar_index_mjs.js.map
